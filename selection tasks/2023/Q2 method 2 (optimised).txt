// This solution is similar to the method 1 solution, but it uses the INT_MIN constant from the limits.h library 
// to initialize max1 and max2 to the minimum possible integer value. 
// It then iterates through the list and updates max1 and max2 as necessary.

// Q2 CP # EASY
// APPROACH 2 (optimised method)
// time complexity o(1) fastest 
// USING C 

#include <stdio.h>
#include <limits.h>

int main() {
    // Array of integers
    int n;
    scanf("%d", &n);
    
    int arr[n];
    for(int i=0;i<n;i++){
        printf("index '%d'= ", i);
        scanf("%d", &arr[i]);
    }
    // Set the initial maximum and second maximum values to the minimum possible integer value
    int max1 = INT_MIN;
    int max2 = INT_MIN;

    // Iterate through the list
    for (int i = 0; i < 5; i++) {
        // If the current number is greater than the current maximum, update the maximum and second maximum values
        if (arr[i] > max1) {
            max2 = max1;
            max1 = arr[i];
        }
        // If the current number is less than the current maximum but greater than the current second maximum, update the second maximum value
        else if (arr[i] > max2) {
            max2 = arr[i];
        }
    }
    printf("%d\n", max2);
    return 0;
}
